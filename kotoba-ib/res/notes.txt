Интерфейс для запросов.

/azu		- просмотр доски с именем azu (по умолчанию страница 1).
/azu/1		- просмотр нити с номером 1 на доске с именем azu.
/azu/1#2	- просмотр сообщения (подсветка) с номером 2 в нити с номером 1 на доске с именем azu.
/azu/p2		- просмотр страницы 2 доски с именем azu.
/azu/r2		- удаление сообщения (или нити, если сообщение начинает нить) с номером 2 с доски с именем azu.
/azu/h1		- скрыть нить с номером 1 на доске с именем azu.
/azu/u1		- отменить скрытие нити с номером 1 на доске с именем azu.
Все перечисленные ссылки могут завершаться /.

Виды правил.

* = null
x = id группы, доски, нити или сообщения
- = правило не имеет смысла
+ = правило имеет смысл
g = правило для группы
b = правило для доски
t = правило для нити
p = правило для сообщения

				-t (x, x, x, *)
+b (x, x, *, *)
+t (x, *, x, *)
+g (x, *, *, *)
				-t (*, x, x, *)
+b (*, x, *, *)
+t (*, *, x, *)
				-p (x, x, x, x)
				-p (x, x, *, x)
				-p (x, *, x, x)
+p (x, *, *, x)
				-p (*, x, x, x)
				-p (*, x, *, x)
				-p (*, *, x, x)
+p (*, *, *, x)
Правила, не имеющий смысла осталены для наглядности.

Интерпретация разрешений.

Доска:
1) View		- показывать доску в списке досок, разрешить просмотр доски
2) Change	- разрешить создание нитей
3) Moderate	- показывать ip, разрешить банить, разрешить изменять настройки нитей и постов

Нить:
1) View		- показывать нить в просмотре доски, показывать нить целиком
2) Change	- разрешить ответы в нить
3) Moderate - разрешить изменение настроек нити

Сообщение:
1) View		- показывать пост в просмотре доски, показывать пост в просмотре нити
2) Change	- не определено
3) Moderate	- не определено

boards.php
    catalog.php
    config.default
create_thread.php
    edit_settings.php
    favorites.php
    hide_thread.php
    index.php
    logout.php
    manage.php
    my_id.php
    over.php
    post.php
    remove_post.php
    remove_upload.php
reply.php
    report.php
    search.php
threads.php
    unhide_thread.php

+ гости могут постить по умолчанию
+ доска новостей и баннеров создаются и настраиваются по умолчанию
- функция массового бана
- фильтр постов по ip
- няшный лог

<?php
/*$l = 1024;
$h = 255;
$n = 256;
$hvec = array();

$mask = $n;
$offset = $h / 2.0;
$hvec[0] = $offset;
$hvec[$n] = $offset;

while ($mask > 0) {
    $hmask = ((int) $mask / 2.0);
    for ($i = $hmask; $i < $n && $i >= 1.0;) {
        $hvec[$i] = ($hvec[$i - $hmask] + $hvec[$i + $hmask]) / 2.0 + (-1 * rand(0, 1)) * $offset;
        if ($hvec[$i] > $h) {
            $hvec[$i] = $h;
        }
        if ($hvec[$i] < 0) {
            $hvec[$i] = 0;
        }
        $i += $mask;
    }
    $offset *= 0.5;
    $mask = $hmask;
}*/

/*for ($i = 1; $i < $n - 1; $i++) {
    echo "<span style=\"color:#" . str_repeat(dechex((int)$hvec[$i]), 3) . "\">█</span>";
}*/

// Одномерный террейн.
/*$im = imagecreate($l, $h);
$bg = imagecolorallocate($im, 255, 255, 255);
$textcolor = imagecolorallocate($im, 0, 0, 0);
for ($i = 0; $i < $n; $i++) {
    imageline($im, $i * ($l / count($hvec)), $h - $hvec[$i] - 1, ($i + 1) * ($l / count($hvec)), $h - $hvec[$i + 1] - 1, $textcolor);
    //echo  $i . ", " . ($h - $hvec[$i] - 1) . ", " . ($i + 1) . ", " . ($h - $hvec[$i + 1] - 1) . "<br/>\n";
}
header('Content-type: image/png');
imagepng($im);
imagedestroy($im);*/

function f($val) {
    static $i = 0;
    static $a = array(0.9, 0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6, 0.5, 0.5);

    return $val * ($i > count($a) ? 0.43 : $a[$i++]);
}

$h = 200;
$n = 64;
$hmatr = array();

$mask = $n;
$offset = $h;
$hmatr[0][0] = $offset;
$hmatr[0][$n] = $offset;
$hmatr[$n][0] = $offset;
$hmatr[$n][$n] = $offset;

function hmap2D(&$hmatr, $n, $h, $mask, $offset) {
    while ($mask > 0) {
        $hmask = ((int) $mask / 2.0);
        for ($i = $hmask; $i < $n && $i >= 1.0;) {
            for ($j = $hmask; $j < $n && $j >= 1.0;) {
                if (!isset($hmatr[$i][$j])) {
                    $hmatr[$i][$j] = (  $hmatr[$i - $hmask][$j - $hmask]
                                     + $hmatr[$i - $hmask][$j + $hmask]
                                     + $hmatr[$i + $hmask][$j - $hmask]
                                     + $hmatr[$i + $hmask][$j + $hmask]) / 4.0 + (-1 * rand(0, 1)) * $offset;
                }
                if ($hmatr[$i][$j] > $h) {
                    $hmatr[$i][$j] = $h;
                }
                if ($hmatr[$i][$j] < 0) {
                    $hmatr[$i][$j] = 0;
                }
                if (!isset($hmatr[$i - $hmask][$j])) {
                    $hmatr[$i - $hmask][$j] = (  $hmatr[$i - $hmask][$j - $hmask]
                                              + $hmatr[$i - $hmask][$j + $hmask]) / 2.0 + (-1 * rand(0, 1)) * $offset;
                }
                if ($hmatr[$i - $hmask][$j] > $h) {
                    $hmatr[$i - $hmask][$j] = $h;
                }
                if ($hmatr[$i - $hmask][$j] <= 0) {
                    $hmatr[$i - $hmask][$j] = 1;
                }
                if (!isset($hmatr[$i][$j - $hmask])) {
                    $hmatr[$i][$j - $hmask] = (  $hmatr[$i - $hmask][$j - $hmask]
                                              + $hmatr[$i + $hmask][$j - $hmask]) / 2.0 + (-1 * rand(0, 1)) * $offset;
                }
                if ($hmatr[$i][$j - $hmask] > $h) {
                    $hmatr[$i][$j - $hmask] = $h;
                }
                if ($hmatr[$i][$j - $hmask] <= 0) {
                    $hmatr[$i][$j - $hmask] = 1;
                }
                if (!isset($hmatr[$i + $hmask][$j])) {
                    $hmatr[$i + $hmask][$j] = (  $hmatr[$i + $hmask][$j - $hmask]
                                              + $hmatr[$i + $hmask][$j + $hmask]) / 2.0 + (-1 * rand(0, 1)) * $offset;
                }
                if ($hmatr[$i + $hmask][$j] > $h) {
                    $hmatr[$i + $hmask][$j] = $h;
                }
                if ($hmatr[$i + $hmask][$j] <= 0) {
                    $hmatr[$i + $hmask][$j] = 1;
                }
                if (!isset($hmatr[$i][$j + $hmask])) {
                    $hmatr[$i][$j + $hmask] = (  $hmatr[$i - $hmask][$j + $hmask]
                                              + $hmatr[$i + $hmask][$j + $hmask]) / 2.0 + (-1 * rand(0, 1)) * $offset;
                }
                if ($hmatr[$i][$j + $hmask] > $h) {
                    $hmatr[$i][$j + $hmask] = $h;
                }
                if ($hmatr[$i][$j + $hmask] <= 0) {
                    $hmatr[$i][$j + $hmask] = 1;
                }
                $j += $mask;
            }
            $i += $mask;
        }
        $offset *= 0.46;
        $mask = $hmask;
    }
}
function rgb2html($r, $g=-1, $b=-1) {
    if (is_array($r) && sizeof($r) == 3)
        list($r, $g, $b) = $r;

    $r = intval($r); $g = intval($g);
    $b = intval($b);

    $r = dechex($r<0?0:($r>255?255:$r));
    $g = dechex($g<0?0:($g>255?255:$g));
    $b = dechex($b<0?0:($b>255?255:$b));

    $color = (strlen($r) < 2?'0':'').$r;
    $color .= (strlen($g) < 2?'0':'').$g;
    $color .= (strlen($b) < 2?'0':'').$b;
    return '#'.$color;
}
hmap2D($hmatr, $n, $h, $n, $offset);

$hmatr2 = array();
for ($i = 0; $i <= $n; $i++) {
    $hmatr2[$i][0] = $hmatr[$i][$n];
}
$hmatr2[0][$n] = $offset;
$hmatr2[$n][$n] = $offset;
hmap2D($hmatr2, $n, $h, $n, $offset);

/*echo "<tt>\n";
printf("<br/>\n&nbsp;&nbsp;&nbsp; ");
for ($i = 0; $i <= $n; $i++) {
    printf("<span style=\"color:red\">%'03d </span>", $i);
}
echo "<br/>\n";
for ($i = 0; $i <= $n; $i++) {
    printf("<span style=\"color:red\">%'03d </span>", $i);
    for ($j = 0; $j <= $n; $j++) {
        if (!isset($hmatr[$i][$j])) {
            echo "<span style=\"color:red\">███ </span>";
        } else {
            echo "<span style=\"color:" . rgb2html((int) $hmatr[$i][$j] + 30, (int) $hmatr[$i][$j] + 30, (int) $hmatr[$i][$j] + 30) . "\">███ </span>";
        }
    }
    for ($j = 0; $j <= $n; $j++) {
        if (!isset($hmatr2[$i][$j])) {
            echo "<span style=\"color:red\">███ </span>";
        } else {
            echo "<span style=\"color:" . rgb2html((int) $hmatr2[$i][$j] + 30, (int) $hmatr2[$i][$j] + 30, (int) $hmatr2[$i][$j] + 30) . "\">███ </span>";
        }
    }
    echo "<br/>\n";
}
printf("<br/>\n&nbsp;&nbsp;&nbsp; ");
for ($i = 0; $i <= $n; $i++) {
    printf("<span style=\"color:red\">%'03d </span>", $i);
}
echo "<br/>\n";
for ($i = 0; $i <= $n; $i++) {
    printf("<span style=\"color:red\">%'03d </span>", $i);
    for ($j = 0; $j <= $n; $j++) {
        if (!isset($hmatr[$i][$j])) {
            echo "<span style=\"color:red\">█</span>";
        } else {
            printf("%'03d ", $hmatr[$i][$j]);
        }
    }
    echo "<br/>\n";
}
echo "<tt/>\n";*/

$im = imagecreatetruecolor(($n + 1) * 10 * 2 - 10, ($n + 1) * 10);
$bg = imagecolorallocate($im, 255, 255, 255);
for ($i = 0; $i <= $n; $i++) {
    for ($j = 0; $j <= $n; $j++) {
        $hmatr[$i][$j] = (int) $hmatr[$i][$j] + 20;
        $hmatr2[$i][$j] = (int) $hmatr2[$i][$j] + 20;
        if ($hmatr[$i][$j] == 0) {
            $rectcolor = imagecolorallocate($im, 1, 1, 1);
        } else {
            $rectcolor = imagecolorallocate($im, $hmatr[$i][$j], $hmatr[$i][$j], $hmatr[$i][$j]);
        }
        /*if ($hmatr[$i][$j] >= 0 && $hmatr[$i][$j] <= 64) {
            $rectcolor = imagecolorallocate($im, 1, 64, 1);
        } else if ($hmatr[$i][$j] > 64 && $hmatr[$i][$j] <= 128) {
            $rectcolor = imagecolorallocate($im, 1, 128, 1);
        } else if ($hmatr[$i][$j] > 128 && $hmatr[$i][$j] <= 192) {
            $rectcolor = imagecolorallocate($im, 1, 192, 1);
        } else if ($hmatr[$i][$j] > 192 && $hmatr[$i][$j] <= 255) {
            $rectcolor = imagecolorallocate($im, 1, 255, 1);
        }*/
        if (!$rectcolor) {
            var_dump($hmatr[$i][$j]);
            throw new Exception("Error.");
        }
        if ($hmatr2[$i][$j] == 0) {
            $rectcolor2 = imagecolorallocate($im, 1, 1, 1);
        } else {
            $rectcolor2 = imagecolorallocate($im, $hmatr2[$i][$j], $hmatr2[$i][$j], $hmatr2[$i][$j]);
        }
        /*if ($hmatr2[$i][$j] >= 0 && $hmatr2[$i][$j] <= 64) {
            $rectcolor2 = imagecolorallocate($im, 1, 64, 1);
        } else if ($hmatr2[$i][$j] > 64 && $hmatr2[$i][$j] <= 128) {
            $rectcolor2 = imagecolorallocate($im, 1, 128, 1);
        } else if ($hmatr2[$i][$j] > 128 && $hmatr2[$i][$j] <= 192) {
            $rectcolor2 = imagecolorallocate($im, 1, 192, 1);
        } else if ($hmatr2[$i][$j] > 192 && $hmatr2[$i][$j] <= 255) {
            $rectcolor2 = imagecolorallocate($im, 1, 255, 1);
        }*/
        if (!$rectcolor2) {
            var_dump($hmatr2[$i][$j]);
            throw new Exception("Error.");
        }
        if (!imagefilledrectangle($im, $j * 10, $i * 10, ($j + 1) * 10, ($i + 1) * 10, $rectcolor)) {
            throw new Exception("Error.");
        }
        if (!imagefilledrectangle($im, ($j + 1) * 10 + ($n * 10) - 10, $i * 10, ($j + 2) * 10 + ($n * 10) - 10, ($i + 1) * 10, $rectcolor2)) {
            throw new Exception("Error.");
        }
        //imagecolordeallocate($im, $rectcolor);
        //imageline($im, $i * ($l / count($hvec)), $h - $hvec[$i] - 1, ($i + 1) * ($l / count($hvec)), $h - $hvec[$i + 1] - 1, $textcolor);
        //printf("%'03d ", $hvec[$i][$j]);
        //printf("%d %d %d %d <br/>\n", $j * 10, $i * 10, ($j + 1) * 10, ($i + 1) * 10);
    }
    //echo "<br/>\n";
}
header('Content-type: image/png');
imagepng($im);
imagedestroy($im);
?>

<?php
$states = array('read_asterisk'         => 1,
                'read_double_asterisk'  => 2,
                'read_italic_text'      => 3,
                'read_bold_text'        => 4,
                'read_italic_bold_text' => 5,
                'read_simple_text'      => 6,
                'read_slash'            => 7);
$enc = 'UTF-8';

$in = '*****наклонный* **жирный** *наклонный**наклонный **наклонный***жирный****нежирный';
$out = '';
$italic = '';
$bold = '';
$cur = '';
$tag_open = false;
$i = 0;
$state = $states['read_simple_text'];

while ($i < mb_strlen($in, $enc)) {
    $cur = mb_substr($in, $i, 1, $enc);
    /*$tmp = array_keys($states, $state);
    echo "$i - $cur - {$tmp[0]} - $state<br/>";*/

    switch ($state) {
        case $states['read_asterisk']:
            if ($cur == '*') {
                $state = $states['read_double_asterisk'];
            } else {
                if ($tag_open) {

                    // Продолжаем читать жирный текст.
                    $bold .= "*$cur";
                    $state = $states['read_bold_text'];
                    $i++;
                } else {

                    // Продолжаем читать простой текст.
                    $out .= "*$cur";
                    $state = $states['read_simple_text'];
                    $i++;
                }
            }
            break;
        case $states['read_double_asterisk']:
            if ($tag_open) {

                // Заканчиваем читать жирный текст.
                if (mb_strlen($bold, $enc) > 0) {
                    $out .= "<b>$bold</b>";
                } else {
                    $out .= '****';
                }
                $bold = '';
                $tag_open = false;
                $state = $states['read_simple_text'];
                $i++;
            } else {

                // Начинаем читать жирный текст.
                $tag_open = true;
                $state = $states['read_bold_text'];
                $i++;
            }
            break;
        case $states['read_bold_text']:
            if ($cur == '*') {
                $state = $states['read_asterisk'];
            } else {
                $bold .= $cur;
            }
            $i++;
            break;
        case $states['read_simple_text']:
            if ($cur == '*') {
                $state = $states['read_asterisk'];
            } else {
                $out .= $cur;
            }
            $i++;
            break;
        default:
            throw new Exception('Unknown state.');
    }
}

if ($state == $states['read_bold_text']) {
    echo "Warning: last double asterisk was not be closed?<br/>";
    $out .= "**$bold";
    $bold = '';
}

echo "$state<br/>";
echo "$in<br/>";
echo "$out<br/>";

$in = $out;
$out = '';
$italic = '';
$bold = '';
$cur = '';
$tag_open = false;
$i = 0;
$state = $states['read_simple_text'];

while ($i < mb_strlen($in, $enc)) {
    $cur = mb_substr($in, $i, 1, $enc);
    /*$tmp = array_keys($states, $state);
    echo "$i - $cur - {$tmp[0]} - $state<br/>";*/

    switch ($state) {
        case $states['read_asterisk']:
            if ($tag_open) {

                // Заканчиваем читать наклонный текст.
                if (mb_strlen($italic, $enc) > 0) {
                    $out .= "<i>$italic</i>";
                } else {
                    $out .= '**';
                }
                $italic = '';
                $tag_open = false;
                $state = $states['read_simple_text'];
                $i++;
            } else {

                // Начинаем читать наклонный текст.
                $tag_open = true;
                $state = $states['read_italic_text'];
                $i++;
            }
            break;
        case $states['read_italic_text']:
            if ($cur == '*') {
                $state = $states['read_asterisk'];
            } else {
                $italic .= $cur;
                $i++;
            }
            break;
        case $states['read_simple_text']:
            if ($cur == '*') {
                $state = $states['read_asterisk'];
            } else {
                $out .= $cur;
                $i++;
            }
            break;
        default:
            throw new Exception('Unknown state.');
    }
}

if ($state == $states['read_italic_text']) {
    echo "Warning: last asterisk was not be closed?<br/>";
    $out .= "*$italic";
    $italic = '';
}

echo "$state<br/>";
echo "$in<br/>";
echo "$out<br/>";
?>