#summary Эта страница содержит соглашения и рекомендации относительно оформления кода, написания комментариев и т.д.
#labels code,comment,convention

= Введение =

Чтобы код и документация Котобы была выдержана в едином стиле, чтобы интерфейсы не выглядели как суп _"из того что было"_, в Котобе принят ряд соглашений относительно именования функций, классов, переменных, и т.д., а так же комментирования и оформления кода. Соглашения оформлены в виде *правил* и *рекомендаций*, к правилам и рекомендациям приведены *примеры* с комментариями. Комментарии к примерам, так же как и сами правила и рекомендации, могут содержать важную информацию, которая (пока ещё) не оформлена в виде правил или рекомендаций.

= Часть 1. Функции работы с сущностями =

Каждая сущность и атрибут имеют имя и описание. Каждая сущность имеет один или более атрибутов. Если атрибут ссылается на атрибут другой сущности, то описание ссылающегося атрибута дается с уточнением, на атрибут какой сущности он ссылается. Каждая сущность может иметь экземпляры. Все экземпляры сущности имеют одно и то же описание. Каждая функция и аргумент имеют имя и описание. Каждая функция может иметь атрибуты и возвращаемое значение. Возвращаемое значение имеет описание.

== Примеры ==

==== 1 ====
{{{
create table posts_files    -- Связь сообщений и вложенных файлов.
(
    post int not null,      -- Идентификатор сообщения.
    file int not null,      -- Идентификатор вложенного файла.
    deleted bit not null,   -- Флаг удаления.
    unique key (post, file),
    constraint foreign key (post) references posts (id) on delete restrict on update restrict,
    constraint foreign key (file) references files (id) on delete restrict on update restrict
)
engine=InnoDB|
}}}

Экземплярами этой сущности будут связи сообщений и вложенных файлов. Все экземпляры имеют одно и то же описание: _"Связь сообщения и вложенного файла"_.

Здесь:
 * *posts_files* - имя сущности.
 * *Связь сообщений и вложенных файлов.*  - описание сущности.
 * *post* - имя атрибута. Ссылается на атрибут id сущности posts.
 * *Идентификатор сообщения.* - описание атрибута с уточнением.
 * *deleted* - имя атрибута.
 * *Флаг удаления.* - описание атрибута.

При описании функций работы с сущностями и их аргументов, а так же при именовании этих
функций и их аргументов будем следовать следующим правилам:

*1.* Если функция удаляет, редактирует или получает/выбирает один или более экземпляров сущности по более чем двум атрибутам сущности, то в описании функции не нужно перечислять все эти атрибуты, а лишь обозначить их словом _"заданную"_. В качестве имён аргументов функции берутся имена атрибутов сущности, по которым выполняется действие. Имя функции строится по следующему правилу:

`сущность_действие[_уточнение][_filtred][_by_атрибут[_атрибут]]()`

Примеры уточнений: `all`, `visible`, `first`, `last`, `count`.

== Примеры ==

==== 1 ====
{{{ 
/**
 * Удаляет заданную нить.
 * @param id mixed <p>Идентификатор.</p>
 */
function threads_delete_by_id($id) { ... }
}}}
Подробно функцию можно описать так: Удаляет нить по заданному идентификатору *id* нити.
Поскольку атрибут *id* нити является родным атрибутом нити, то в качестве его имени берётся имя атрибута.

Здесь:
 * *threads* - имя сущности.
 * *delete* (Удаляет) - действие, которое функция осуществляет с одним или более экземпляром сущности.
 * *id* - атрибут, по значению которого осуществляется действие.
 * *Нить* - имя экземпляра сущности.
==== 2 ====
{{{ 
/**
 * Редактирует специфичный для нити бамплимит нитей на заданных досках.
 * @param boards array <p>Идентификаторы досок.</p>
 * @param bump_limit mixed <p>Бамплимит.</p>
 */
function threads_edit_bump_limit_by_boards($boards, $bump_limit) { ... }
}}}
Подробно функцию можно описать так: Редактирует специфичный для нити бамплимит у всех нитей принадлежащих доскам, идентификаторы которых перечислены в массиве *boards*, устанавливая значение специфичного для нити бамплимита в *bump_limit*. Атрибут *Идентификатор доски* является родным атрибутом доски, поэтому его имя как атрибута сущности нить выбрано в виде `Атрибут сущность`, где сущность - доска.

Здесь:
 * *threads* - имя сущности.
 * *edit* (Редактирует) - действие, которое функция осуществляет с одним или более экземпляром сущности.
 * *boards* - массив значений атрибута board (нить имеет атрибут board), по которым осуществляется действие.
 * *Нить* - имя экземпляра сущности.
==== 3 ====
Функция может выполнять действие не только по атрибуту сущности, с которой она работает, но и по атрибутам других сущностей, которые с ним связаны. В этом случае так же справедливо правило 1. Именовать аргумент для хранения значения атрибута, по которому выполняется действие, нужно полностью: `сущность_атрибут`:
{{{ 
/**
 * Редактирует специфичный для нити бамплимит заданных нитей.
 * @param board_names array <p>Имена досок.</p>
 * @param bump_limit mixed <p>Бамплимит.</p>
 */
function threads_edit_bump_limit_by_boards($board_names, $bump_limit) { ... }
}}}
Подробно функцию можно описать так: Редактирует специфичный для нити бамплимит у всех нитей принадлежащих доскам, имена которых перечислены в массиве *board_names*, устанавливая значение специфичного для нити бамплимита в *bump_limit*.

Здесь:
 * *threads* - имя сущности.
 * *edit* (Редактирует) - действие, которое функция осуществляет с одним или более экземпляром сущности.
 * *board_names* - массив значений атрибута name (доска имеет атрибут name), по которым осуществляется действие. Нить имеет атрибут идентификатор доски, по которому можно определить значение атрибута имя доски.
 * *Нить* - имя экземпляра сущности.
==== 4 ====
Функция может выполнять сложное действие с экземплярами сущностей, которое выполняется не по атрибутам сущности или не только по ним, в этом случае функция использует функцию, в частности лямбда функцию, которая будет применяется к экземплярам сущности, чтобы выполнить с ними требуемое действие.
{{{
/**
 * Получает отфильтрованные нити.
 * @param filter object <p>Фильтр (лямбда функция).</p>
 */
function threads_get_filtred($filter) { ... }
}}}
{{{
/**
 * Такой фильтр может быть применён к выбранным нитям, чтобы пропустить первые
 * 10 из них.
 */
$filter = function () { static $i = 0; while($i++ < 10) return false; return true;  }
}}}

*2.* Описание функции, добавляющей один или более экземпляров сущности, строится по следующему правилу: _"Добавляет описание`_`экземпляра`_`сущности"_. Такая функция может получать в качестве аргументов значения атрибутов нового экземпляра сущности. В качестве имён этих аргументов берутся имена соответствующих атрибутов. Если атрибут ссылается на атрибут другой сущности, то имя аргумента для соответствующего атрибута строится так: `имя_ссылающегося_атрибута_имя_атрибута_другой_сущности` (см. пример 3). В качестве описания аргументов берутся описания соответствующих атрибутов сущности и, если необходимо, то с уточнением, какой сущности они принадлежат. Это уточнение не зависит от того, имеет ли уточнение описание атрибута. Описание экземпляра сущности и описание функции в отдельных случаях могут отходить от правила, если описание, построенное по правилу, не верно описывает действие функции (см. пример 2). Имя функции строится по следующему правилу:

`имя_сущности_add()`

== Примеры: ==

==== 1 ====
{{{
/**
 * Добавляет стиль.
 * @param name string <p>Имя файла стиля.</p>
 */
function stylesheets_add($name) { ... }
}}}

Здесь:
 * *stylesheets* - имя сущности.
 * *стиль* - описание экземпляра сущности.
 * *name* - имя аргумента функции, оно же имя атрибута сущности.
 * *Имя файла стиля* - описание аргумента функции, оно же описание атрибута с уточнением. *Имя файла* - описание атрибута без уточнения.
==== 2 ====
{{{
/**
 * Скрывает нить.
 * @param user mixed <p>Идентификатор пользователя.</p>
 * @param thread mixed <p>Идентификатор нити.</p>
 */
function hidden_threads_add($user, $thread) { ... }
}}}

По правилу описание функции должно было бы выглядеть так _"Добавляет скрытую нить"_ или _"Добавляет связь пользователя и нити"_, и то и другое описание ложны. Суть действия функции в том, что она скрывает заданную нить от заданного пользователя, в соответствии с этим и составлено описание функции.

Здесь:
 * *hidden_threads* - имя сущности.
 * *user* - имя аргумента функции, оно же имя атрибута сущности.
 * *Идентификатор пользователя.* - описание аргумента функции, оно же описание атрибута сущности.
 * *thread* - имя аргумента функции, оно же имя атрибута сущности.
 * *Идентификатор нити.* - описание аргумента функции, оно же описание атрибута сущности.
==== 3 ====
{{{
/**
 * Добавляет пользователя в группу.
 * @param user_id mixed <p>Идентификатор пользователя.</p>
 * @param group_id mixed <p>Идентификатор группы.</p>
 */
function user_groups_add($user_id, $group_id) { ... }
}}}

Здесь:
 * *user_groups* - имя сущности.
 * *user_id* - имя аргумента функции, построенное из имен ссылающегося атрибута и атрибута другой сущности. На атрибут с именем id ссылается атрибут с именем user.
 * *Идентификатор пользователя.* - описание аргумента функции, оно же описание атрибута с уточнением. *Идентификатор* - описание атрибута без уточнения оно же описание атрибута другой сущности.

*3.* Описание функций, проверяющих корректность значений атрибутов сущностей начинается со слова _"Проверяет"_. Кроме того, в описании должно быть имя атрибута, значение которого функция проверяет, либо его изменённый вариант, если это необходимо (см. пример 2). В качестве имени аргумента функции берётся атрибут, корректность значения которого функция проверяет. В качестве описания аргумента берётся описание соответствующего атрибута и если требуется, то с уточнением, какой сущности он принадлежит. Если функция имеет возвращаемое значение, то его описание строится по правилу: _"Возвращает безопасный для использования имя`_`атрибута`_`с`_`уточнением"_ Имя функции строится по правилу:

`сущность_check_атрибут[_дополнение]()`

Примеры дополнений: `size`, `format`.

== Примеры: ==

==== 1 ====
{{{
/**
 * Проверяет корректность номера сообщения.
 * @param number mixed <p>Номер сообщения.</p>
 * @return string
 * Возвращает безопасный для использования номер сообщения.
 */
function posts_check_number($number) { ... }
}}}

Здесь:
 * *posts* - сущность.
 * *number* - атрибут.
 * *Номер сообщения* - имя атрибута с уточнением. Без уточнения _"Номер"_.
==== 2 ====
{{{
/**
 * Проверяет корректность расширения загружаемого файла.
 * @param ext string <p>Расширение.</p>
 * @return string
 * Возвращает безопасное для использования расширение загружаемого файла.
 */
function upload_types_check_extension($ext) { ... }
}}}

Уточнение, какой сущности принадлежит атрибут с именем _"Расширение"_ не требуется, поэтому в качестве описания аргумента взято имя атрибута без уточнения. Описание функции должно было бы быть _"Проверяет корректность расширения типа загружаемых файлов"_, но поскольку это описание не корректно, так как в данном случае тип загружаемого файла определяется расширением файла, то в качестве описания выбрана корректная фраза, хоть и не подходящая под шаблон.

Здесь:
 * *upload_types* - сущность.
 * *extension* - атрибут.
 * *Расширение* - имя атрибута.
==== 3 ====
{{{
/**
 * Проверяет, удовлетворяет ли имя отправителя ограничениям по размеру.
 * @param name string <p>Имя отправителя.</p>
 */
function posts_check_name_size($name) { ... }
}}}

Функция не имеет возвращаемого значения и имеет дополнение в имени.

Здесь:
 * *posts* - сущность.
 * *name* - атрибут.
 * *Имя отправителя* - имя атрибута.
 * *size* - дополнение.