#summary Эта страница содержит соглашения и рекомендации относительно оформления кода, написания комментариев и т.д.
#labels code,comment,convention

= Введение =

Чтобы код и документация Котобы была выдержана в едином стиле, чтобы интерфейсы не выглядели как суп _"из того что было"_, в Котобе приняты соглашения относительно именования функций, классов, переменных, и т.д., а так же комментирования и оформления кода. Соглашения оформлены в виде правил и рекомендаций, к которым приведены примеры с комментариями. Комментарии к примерам, так же как и сами правила и рекомендации, могут содержать важную информацию, которая пока ещё не оформлена в виде правил или рекомендаций.

= 1. Функции работы с сущностями =

*Сущность:*
 * *имя*
 * *описание*
 * *атрибуты* (1 и более)
 * *экземпляры* (0 и более)

*Атрибут:*
 * *имя*
 * *описание*
 * *сущность* которой принадлежит атрибут (1)
 * *сущность* на которую ссылается атрибут (0 или 1)

*Экземпляр:*
 * *описание*
 * *сущность*

*Фукнция:*
 * *имя*
 * *описание*
 * *аргументы* (0 и более)
 * *возвращаемое значение*

*Аргумент:*
 * *имя*
 * *описание*
 * *значение*

*Возвращаемое значение:*
 * *описание*

Каждая сущность имеет имя и описание. Каждая сущность имеет один или более атрибутов. Каждая сущность может иметь экземпляры. Каждый атрибут имеет имя и описание. Если атрибут ссылается на атрибут другой сущности, то описание ссылающегося атрибута дается с уточнением, на атрибут какой сущности он ссылается. Все экземпляры сущности имеют одно и то же описание. Каждая функция имеет имя и описание. Каждая функция может иметь атрибуты и возвращаемое значение. Каждый аргумент имеет имя, описание и значение. Возвращаемое значение имеет описание.

=== Примеры ===

==== 1 ====
{{{
create table posts_files    -- Связь сообщений и вложенных файлов.
(
    post int not null,      -- Идентификатор сообщения.
    file int not null,      -- Идентификатор вложенного файла.
    deleted bit not null,   -- Флаг удаления.
    unique key (post, file),
    constraint foreign key (post) references posts (id) on delete restrict on update restrict,
    constraint foreign key (file) references files (id) on delete restrict on update restrict
)
engine=InnoDB|
}}}

Экземплярами этой сущности будут связи сообщений и вложенных файлов. Все экземпляры имеют одно и то же описание: _"Связь сообщения и вложенного файла"_.

Здесь:
 * *posts_files* - имя сущности.
 * *Связь сообщений и вложенных файлов*  - описание сущности.
 * *post* - имя атрибута. Ссылается на атрибут id сущности posts.
 * *Идентификатор сообщения* - описание атрибута с уточнением.
 * *deleted* - имя атрибута.
 * *Флаг удаления* - описание атрибута.

== 1.1 Общие правила. ==

Все функции работы с сущностями осуществляют некое действие над экземплярами сущностей или над самими сущностями. Для осуществления действия над экземплярами сущности, необходимо неким образом различать экземпляры сущностей между собой. Простейшие функции осуществляют действие над экземплярами сущности, различая их по значению одного или более атрибутов сущности. Более сложные функции могут использовать обработчик, который подсказывает функции, над каким экземпляром сущности нужно совершить действие, а над каким нет. Имя функции строится по правилам, в зависимости от действия, которое осуществляет функция (см. ниже). Описание функции может строится по установленным правилам или по следующим рекомендациям. Описание функции должно начинаться с глагола, обозначающего действие, которая функция осуществляет. В описании функции должно присутствовать описание экземпляров сущности или самой сущности, над которой функция выполняет действие. Если функция осуществляет действие по атрибутам сущности, то в описании функции могут присутствовать описания этих атрибутов. Если функция принимает в качестве аргументов значения атрибутов сущности, которые не ссылаются на атрибуты других сущностей, то в качестве имени аргумента как правило выбирается имя соответствующего атрибута, а в качестве описания аргумента описание соответствующего атрибута. Если функция принимает в качестве аргументов значения атрибутов сущности, которые ссылаются на атрибуты других сущностей, то имя аргумента функции строится по следующему правилу:

`имя_ссылающегося_атрибута_имя_атрибута_другой_сущности`.

Описание такого аргумента функции строится из описания соответствующего атрибута с уточнением, какой сущности он принадлежит. Описание возвращаемого значения начинается со слова _"возвращает"_.

== 1.2 Функции удаления, редактирования и получения. ==

Если функция удаляет, редактирует или получает/выбирает один или более экземпляров сущности по значению одного или двух атрибутов, то в описании функции должно присутствовать описание этих атрибутов.

Имя функции строится по следующему правилу:

`имя_сущности_действие[_уточнение][_filtred][_by_имя_атрибута[_имя_атрибута]]()`

Примеры уточнений: `all`, `visible`, `first`, `last`, `count`.

== Примеры ==

==== 1 ====
{{{ 
/**
 * Удаляет нить с заданным идентификатором.
 * @param id mixed <p>Идентификатор.</p>
 */
function threads_delete_by_id($id) { ... }
}}}
Функция осуществляет действие по одному атрибуту сущности, поэтому при её описании используется описание этого атрибута. Поскольку атрибут *id* нити является родным атрибутом нити, то в качестве его имени соответствующего аргумента берётся имя атрибута, и в качестве его описания берётся описание атрибута.

Здесь:
 * *threads* - имя сущности.
 * *delete* (Удаляет) - действие, которое функция осуществляет с одним или более экземпляром сущности.
 * *id* - имя атрибута, по значению которого осуществляется действие.
 * *Идентификатор* - описание атрибута.
 * *Нить* - описание экземпляра сущности.
==== 2 ====
{{{ 
/**
 * Редактирует специфичный для нити бамплимит нитей на заданных досках.
 * @param board_ids array <p>Идентификаторы досок.</p>
 * @param bump_limit mixed <p>Бамплимит.</p>
 */
function threads_edit_bump_limit_by_boards($board_ids, $bump_limit) { ... }
}}}
Подробно функцию можно описать так: Редактирует специфичный для нити бамплимит у всех нитей принадлежащих доскам, идентификаторы которых перечислены в массиве *board_ids*, устанавливая значение специфичного для нити бамплимита в *bump_limit*. Атрибут *board* - *Идентификатор доски* ссылается на атрибут *id* доски, поэтому имя соответствующего аргумента выбрано с уточнением.

Здесь:
 * *threads* - имя сущности.
 * *edit* (Редактирует) - действие, которое функция осуществляет с одним или более экземпляром сущности.
 * *boards* - массив значений атрибута board (нить имеет атрибут board), по которым осуществляется действие.
 * *Нить* - имя экземпляра сущности.
 * *bump_limit* - в имени фукнции является уточнением.
==== 3 ====
Функция может выполнять сложное действие с экземплярами сущностей, которое выполняется не по значению атрибутов сущности или не только по ним, в этом случае функция использует функцию, в частности лямбда функцию, которая будет применяется к экземплярам сущности, чтобы выполнить с ними требуемое действие.
{{{
/**
 * Получает отфильтрованные нити.
 * @param filter object <p>Фильтр (лямбда функция).</p>
 */
function threads_get_filtred($filter) { ... }
}}}
{{{
/**
 * Такой фильтр может быть применён к выбранным нитям, чтобы пропустить первые
 * 10 из них.
 */
$filter = function () { static $i = 0; while($i++ < 10) return false; return true;  }
}}}

== 1.3 Функции добавления. ==

Описание функции, добавляющей один или более экземпляров сущности, строится по следующему правилу: _"Добавляет описание`_`экземпляра`_`сущности"_. Такая функция может получать в качестве аргументов значения атрибутов нового экземпляра сущности. Описание экземпляра сущности и описание функции в отдельных случаях могут отходить от правила, если описание, построенное по правилу, не верно описывает действие функции (см. пример 2). Имя функции строится по следующему правилу:

`имя_сущности_add()`

== Примеры: ==

==== 1 ====
{{{
/**
 * Добавляет стиль.
 * @param name string <p>Имя файла стиля.</p>
 */
function stylesheets_add($name) { ... }
}}}

Здесь:
 * *stylesheets* - имя сущности.
 * *стиль* - описание экземпляра сущности.
 * *name* - имя аргумента функции, оно же имя атрибута сущности.
 * *Имя файла стиля* - описание аргумента функции, оно же описание атрибута с уточнением. *Имя файла* - описание атрибута без уточнения.
==== 2 ====
{{{
/**
 * Скрывает нить.
 * @param user mixed <p>Идентификатор пользователя.</p>
 * @param thread mixed <p>Идентификатор нити.</p>
 */
function hidden_threads_add($user, $thread) { ... }
}}}

По правилу описание функции должно было бы выглядеть так _"Добавляет скрытую нить"_ или _"Добавляет связь пользователя и нити"_, и то и другое описание не корректны. Суть действия функции в том, что она скрывает заданную нить от заданного пользователя, в соответствии с этим и составлено описание функции.

Здесь:
 * *hidden_threads* - имя сущности.
 * *user* - имя аргумента функции, оно же имя атрибута сущности.
 * *Идентификатор пользователя.* - описание аргумента функции, оно же описание атрибута сущности.
 * *thread* - имя аргумента функции, оно же имя атрибута сущности.
 * *Идентификатор нити.* - описание аргумента функции, оно же описание атрибута сущности.
==== 3 ====
{{{
/**
 * Добавляет пользователя в группу.
 * @param user_id mixed <p>Идентификатор пользователя.</p>
 * @param group_id mixed <p>Идентификатор группы.</p>
 */
function user_groups_add($user_id, $group_id) { ... }
}}}

Здесь:
 * *user_groups* - имя сущности.
 * *user_id* - имя аргумента функции, построенное из имен ссылающегося атрибута и атрибута другой сущности. На атрибут с именем *id* ссылается атрибут с именем *user*.
 * *Идентификатор пользователя.* - описание аргумента функции, оно же описание атрибута с уточнением. *Идентификатор* - описание атрибута без уточнения оно же описание атрибута другой сущности.

== 1.4 Функции проверки корректности значений атрибутов. ==

Описание функций, проверяющих корректность значений атрибутов сущностей начинается со слова _"Проверяет"_. Кроме того, в описании должно присутствовать описание атрибута, значение которого функция проверяет, либо его изменённый вариант, если это необходимо (см. пример 2). Если функция имеет возвращаемое значение, то его описание строится по правилу: _"Возвращает безопасный для использования описание`_`атрибута`_`с`_`уточнением"_ Имя функции строится по правилу:

`имя_сущности_check_имя_атрибута[_дополнение]()`

Примеры дополнений: `size`, `format`.

== Примеры: ==

==== 1 ====
{{{
/**
 * Проверяет корректность номера сообщения.
 * @param number mixed <p>Номер сообщения.</p>
 * @return string
 * Возвращает безопасный для использования номер сообщения.
 */
function posts_check_number($number) { ... }
}}}

Здесь:
 * *posts* - имя сущности.
 * *number* - имя атрибута.
 * *Номер сообщения* - описание атрибута с уточнением. Без уточнения _"Номер"_.
==== 2 ====
{{{
/**
 * Проверяет корректность расширения загружаемого файла.
 * @param ext string <p>Расширение.</p>
 * @return string
 * Возвращает безопасное для использования расширение загружаемого файла.
 */
function upload_types_check_extension($ext) { ... }
}}}

Уточнение, какой сущности принадлежит атрибут с описанием _"Расширение"_ не требуется, поэтому в качестве описания аргумента взято описание атрибута без уточнения. Описание функции должно было бы быть _"Проверяет корректность расширения типа загружаемых файлов"_, но поскольку это описание не корректно, так как в данном случае тип загружаемого файла определяется расширением файла, то в качестве описания выбрана корректная фраза, хоть и не подходящая под шаблон.

Здесь:
 * *upload_types* - имя сущности.
 * *extension* - имя аргумента, оно же имя атрибута.
 * *Расширение* - описание аргумента, оно же описание атрибута.
==== 3 ====
{{{
/**
 * Проверяет, удовлетворяет ли имя отправителя ограничениям по размеру.
 * @param name string <p>Имя отправителя.</p>
 */
function posts_check_name_size($name) { ... }
}}}

Функция не имеет возвращаемого значения и имеет дополнение в имени.

Здесь:
 * *posts* - имя сущности.
 * *name* - имя аргумента, оно же имя атрибута.
 * *Имя отправителя* - описание аргумента, оно же описание атрибута.
 * *size* - дополнение.